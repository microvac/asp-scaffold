<#@ assembly name="EnvDTE" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="EnvDTE" #><#+
	DTE DTE { get { return (DTE)((IServiceProvider)this.Host).GetService(typeof(DTE)); } }
	Project ActiveProject { get { return DTE.ActiveDocument.ProjectItem.ContainingProject; } }

	IEnumerable<ProjectItem> EnumerateProjectItem(ProjectItem p)
	{
		yield return p;
		Level++;
		foreach (var sub in p.ProjectItems.Cast<ProjectItem>())
			foreach (var sub2 in EnumerateProjectItem(sub))
				yield return sub2;
		Level--;
	}
	IEnumerable<ProjectItem> EnumerateProjectItem(Project p)
	{
		foreach (var sub in p.ProjectItems.Cast<ProjectItem>())
			foreach (var sub2 in EnumerateProjectItem(sub))
				yield return sub2;
	}
	// enumerate projects and code elements
	IEnumerable<CodeElement> EnumerateCodeElement(CodeElement element)
	{
		yield return element;
		Level++;
		foreach (var sub in element.Children.Cast<CodeElement>()) {
			foreach(var sub2 in EnumerateCodeElement(sub))
				yield return sub2;
		}
		Level--;
	}
	IEnumerable<CodeElement> EnumerateCodeElement(CodeElements elements)
	{
		Level++;
		foreach (var sub in elements.Cast<CodeElement>()) {
			foreach(var sub2 in EnumerateCodeElement(sub))
				yield return sub2;
		}
		Level--;
	}
	IEnumerable<CodeElement> EnumerateCodeElement(FileCodeModel code)
	{
		return EnumerateCodeElement(code.CodeElements);
	}
	IEnumerable<CodeElement> EnumerateCodeElement(ProjectItem p)
	{
		return EnumerateCodeElement(p.FileCodeModel.CodeElements);
	}

	// cache usefull TS data
	void ParseProject()
    {
		if (_allClasses == null)
        {
			_allClasses = new List<CodeClass>();
			_allEnums = new List<CodeEnum>();
			var proj = ActiveProject;
			foreach (var item in EnumerateProjectItem(proj)) 
			{
				var code = item.FileCodeModel;
				if (code == null)
  					continue;
				foreach(var e in EnumerateCodeElement(code))
				{
					switch (e.Kind)
					{
						case vsCMElement.vsCMElementClass:
							_allClasses.Add((CodeClass)e);
							break;
						case vsCMElement.vsCMElementEnum:
							_allEnums.Add((CodeEnum)e);
							break;
					}
				}
			}
        }
    }
	List<CodeClass> _allClasses;
	List<CodeEnum> _allEnums;
	List<CodeClass> AllClasses {
		get {
			ParseProject();
			return _allClasses;
        }
    }
	List<CodeEnum> AllEnums {
		get {
			ParseProject();
			return _allEnums;
        }
    }

	// convert strings to type name, param name, etc...
	string GetTSName(CodeVariable p) { return p.Name; }
	string GetTSName(CodeProperty p) { return GetTSName(p.Name); }
	string GetTSName(string pName)
	{
		var result = pName;
		if (result.StartsWith("@"))
			result = result.Substring(1);
		return result;
	}

	bool IsWebAPI(CodeClass _class)
    {
        foreach (var p in GetParents(_class))
			if (p.Name == "ApiController")
				return true;
		return false;
    }

	enum THint {
		Normal,
		Knockout,
		KnockoutInArray,
    }
	string GetTSDefault(CodeProperty p) { return GetTSDefault(GetTSType(p)); }
	string GetTSDefault(CodeVariable p) { return GetTSDefault(GetTSType(p)); }
	string GetTSDefault(string type) 
	{
		switch (type)
		{
			case "number": return "0";
			default: return "null";
		}
	}
	string GetTSType(CodeProperty p, THint hint = THint.Normal) { return GetTSType(p.Type.AsString, hint); }
	string GetTSType(CodeParameter p, THint hint = THint.Normal) { return GetTSType(p.Type.AsString, hint); }
	string GetTSType(CodeFunction p, THint hint = THint.Normal) { return GetTSType(p.Type.AsString, hint); }
	string GetTSType(CodeVariable p, THint hint = THint.Normal) { return GetTSType(p.Type.AsString, hint); }
	string GetTSType(string type, THint hint = THint.Normal)
	{
		type = SimplifyType(type);
		switch(type)
		{
			case "void": return "void";
			case "long":
			case "int":
			case "short":
			case "decimal":
			case "float":
			case "double":
            {
                switch (hint)
                {
					case THint.Knockout: return "KnockoutObservable<number>";
					case THint.KnockoutInArray:
					case THint.Normal: return "number";
                }
				break;
            }
			case "bool": 
            {
                switch (hint)
                {
					case THint.Knockout: return "KnockoutObservable<boolean>";
					case THint.KnockoutInArray:
					case THint.Normal: return "boolean";
                }
				break;
            }
			case "string": 
            {
                switch (hint)
                {
					case THint.Knockout: return "KnockoutObservable<string>";
					case THint.KnockoutInArray:
					case THint.Normal: return "string";
                }
				break;
            }
			default: 
                if (EnumerateTSClass("TSFlag.JSonData").Select(x => x.FullName).Contains(type))
                    switch (hint)
					{
						case THint.KnockoutInArray:
						case THint.Knockout: return "IKO" + ShortName(type);
						case THint.Normal:
						default:
							return "App.Models.I" + ShortName(type);
					}
                if (EnumerateTSEnum().Select(x => x.FullName).Contains(type))
                    return "App.Models."+ShortName(type);
				var a = GetListType(type);
				if (a != null)
                {
                    switch (hint)
					{
						case THint.KnockoutInArray:
						case THint.Knockout: return string.Format("KnockoutObservableArray<{0}>", GetTSType(a, THint.KnockoutInArray));
						case THint.Normal: return string.Format("Array<{0}>", GetTSType(a, THint.Normal));
					}
                }
				break;
		}
		return string.Format("/** {0} **/ any", type);
	}
	string ShortName(string type)
    {
 		int di = type.LastIndexOf('.');
		if (di > -1)
			type = type.Substring(di + 1);
		return type;
   }
	string SimplifyType(string type)
    {
 		if (type.EndsWith("?"))
			type = type.Substring(0, type.Length - 1);

		//Regex regtypenull = new Regex("Nullable\\<(?<inner>(.)+)\\>", RegexOptions.Compiled);
		//var m = regtypenull.Match(type);
		//if (m.Success)
		//	type = m.Groups["inner"].Value;

		return type;
   }
	string GetListType(string type)
    {
		if (type == "System.Collections.IEnumerable")
			return "any";

		if (type.StartsWith("System.Collections.Generic.IEnumerable<"))
        {
			int l = "System.Collections.Generic.IEnumerable<".Length;
			return type.Substring(l, type.Length - l - 1);
        }

		if (type.StartsWith("System.Collections.Generic.List<"))
        {
			int l = "System.Collections.Generic.List<".Length;
			return type.Substring(l, type.Length - l - 1);
        }

		if (type.StartsWith("System.Collections.Generic.IList<"))
        {
			int l = "System.Collections.Generic.IList<".Length;
			return type.Substring(l, type.Length - l - 1);
        }

		return null;
    }

	IEnumerable<CodeClass> GetParents(CodeClass cs)
    {
        foreach (var item in cs.Bases.Cast<CodeElement>().Where(x => x.Kind == vsCMElement.vsCMElementClass).Cast<CodeClass>())
        {
			yield return item;
			foreach (var sup in GetParents(item))
				yield return sup;
        }
    }

	// enumerate classes, enums, members with ToTSAttribute in ActiveProject
	IEnumerable<CodeClass> EnumerateTSClass(string kind)
	{
		foreach (var _class in AllClasses
								.Where(x => x.Kind == vsCMElement.vsCMElementClass)
								.Where(x => IsTSFlag((CodeElement)x, ca => ca.Value.EndsWith(kind)))
				) 
			yield return _class;
	}
	IEnumerable<CodeEnum> EnumerateTSEnum()
	{
		foreach (var _class in AllEnums
								.Where(x => x.Kind == vsCMElement.vsCMElementEnum)
								.Where(x => IsTSFlag((CodeElement)x, yield => true))
				) 
			yield return _class;
	}
	IEnumerable<CodeElement> EnumerateTSMembers(CodeClass _class)
	{
		foreach (var member in _class.Children.Cast<CodeElement>()) 
        {
			if (HasAttribute(member, xa => xa.FullName.EndsWith("ToTSAttribute") && xa.Value.EndsWith("TSFlag.Ignore")))
				continue;
			switch(member.Kind) 
            {
				case vsCMElement.vsCMElementFunction:
					var f = (CodeFunction)member;
					if (f.IsShared || (f.Access & vsCMAccess.vsCMAccessPublic) == 0)
						continue;
					break;
				case vsCMElement.vsCMElementProperty:
					var p = (CodeProperty)member;
					if ((p.Access & vsCMAccess.vsCMAccessPublic) == 0)
						continue;
					break;
				case vsCMElement.vsCMElementVariable:
					var c = (CodeVariable)member;
					if ((c.Access & vsCMAccess.vsCMAccessPublic) == 0)
						continue;
					break;
				default:
					continue;
            }
			yield return member;
        }
	}

	bool IsTSFlag(CodeElement e, Predicate<CodeAttribute> extra) { return HasAttribute(e, xa => xa.FullName.EndsWith("ToTSAttribute") && (extra == null || extra(xa))); }
    bool HasAttribute(CodeElement e, Predicate<CodeAttribute> _check) { return GetAttribute(e, _check) != null; }
    CodeAttribute GetAttribute(CodeElement e, Predicate<CodeAttribute> _check)
    {
		return (
			from x in e.Children.Cast<CodeElement>()
			where x.Kind == vsCMElement.vsCMElementAttribute
			let xa = (CodeAttribute)x
			where _check(xa)
			select xa
		).FirstOrDefault();
    }

	// utility on CodeElement
	string GetText(CodeElement e)
	{
		var edit = e.StartPoint.CreateEditPoint();
		return edit.GetText(e.EndPoint);
	}


	// miscellaneous utility
	int Level = 0;
	void Indent() { Indent(Level); }
	void Indent(int lvl)
	{
		for(int i=0; i<lvl; i++)
			Write("    ");
	}
#>