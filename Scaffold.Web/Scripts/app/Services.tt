<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".ts" #>
<#@include file="T4Utils.t4" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="EnvDTE" #>
// WARNING: T4 Template generated Javascript proxy client objects (it depends on CodeToJSonData)
//
/// <reference path="../typings/jquery/jquery.d.ts"/>
/// <reference path="Models.ts"/>
module App.Services {
<#
	foreach (var _class in EnumerateTSClass("TSFlag.ServerProxy")) 
	{
		WriteLine("");

		var elem = (CodeElement)_class;
		//Indent(1); WriteLine("// {0}: {1}", elem.ProjectItem.FileNames[0], elem.StartPoint.Line);

		Indent(1); Write("export class {0}", GetProxyName(_class.Name)); WriteLine(" {");
#>
        cache = false;
        timeout = 2000;
		async = true;
        constructor(public baseurl: string) {}
<#
		bool isWeb = IsWebAPI(_class);
		var members = (isWeb ? _class.Children.Cast<CodeElement>() : EnumerateTSMembers(_class))
						.Where(x => x.Kind == vsCMElement.vsCMElementFunction)
						.Cast<CodeFunction>()
						.Where(x => !x.IsShared && (x.Access & vsCMAccess.vsCMAccessPublic) != 0)
			;
		foreach(var member in EnumerateTSMembers(_class).Where(x => x.Kind == vsCMElement.vsCMElementFunction)) 
		{
			var fct = (CodeFunction)member;

            var tresult = GetReturnType(fct, isWeb);
			var method = GetMethod((CodeElement)member, isWeb);

			var url = string.Format(isWeb ? "api/{0}/{1}" : "{0}/{1}", GetRouteName(_class.Name), member.Name);
			if(isWeb) {
				var sb = new StringBuilder("");
				bool first = true;
				for (int i = 0; i<fct.Parameters.Count; i++) {
					var p = (CodeParameter)fct.Parameters.Item(i+1);
					if (HasAttribute((CodeElement)p, xa => xa.Name == "FromBody"))
						continue;
					sb.Append(first ? "?" : "&");
					first = false;
					var pt = GetTSType(p);
					if (pt == "string")
						sb.AppendFormat("{0}='+encodeURI({0})+'", p.Name);
					else
						sb.AppendFormat("{0}='+{0}+'", p.Name);
				}
				url += sb.ToString();
			}

			WriteLine("");
			Indent(2); Write("{0}(", fct.Name); 
            for (int i = 0; i<fct.Parameters.Count; i++) {
                if (i>0)
                    Write(", ");
                var p = (CodeParameter)fct.Parameters.Item(i+1);
				if (isWeb && HasAttribute((CodeElement)p, xa => xa.Name == "FromBody")) {
					Write("/** [FromBody] **/");
				}
				var pt = GetTSType(p);
                Write("{0}: {1}", p.Name, pt);
            }
            Write("): JQueryPromise<{0}> ", tresult); WriteLine("{");
#>
		    var res = $.ajax({
			    cache: this.cache,
			    async: this.async,
			    timeout: this.timeout,
			    dataType: 'json',
				contentType: 'application/json',
			    type: '<#= method #>',
			    url: this.baseurl + '<#= url #>',
<# 
			if (isWeb) {
				for (int i = 0; i<fct.Parameters.Count; i++) {
					var p = (CodeParameter)fct.Parameters.Item(i+1);
					if (HasAttribute((CodeElement)p, xa => xa.Name == "FromBody")) {
						if (method == "GET") {
							WriteLine("error: GET methods don't support FromBody parameters.");
						}
						else {
							Indent(4);
							Write("data: JSON.stringify(");
							Write(p.Name);
							WriteLine("),");
						}
						break;
					}
				}
			}
			else {
				Indent(4);
				Write("data: { ");
				for (int i = 0; i<fct.Parameters.Count; i++) {
					if (i>0)
						Write(", ");
					var p = (CodeParameter)fct.Parameters.Item(i+1);
					Write("{0}: {0}", p.Name);
				}
				WriteLine(" },");
			}
#>
		    })
			;
            return res;
<#
			Indent(2); WriteLine("}");
		}
		Indent(1); WriteLine("}");
	}

#>
}
<#+
	string GetProxyName(string name)
	{
		return GetRouteName(name) + "Service";
	}
	string GetRouteName(string name)
	{
		if (name.EndsWith("Controller"))
			name = name.Substring(0, name.Length - "Controller".Length);
		return name;
	}
	string GetReturnType(CodeFunction fct, bool isWeb)
	{
		if (isWeb) 
		{
			return GetTSType(fct);
        }
		else 
		{
			var tsa = GetAttribute((CodeElement)fct, xa => xa.FullName.EndsWith("ToTSAttribute"));
			if (tsa == null)
				return "any";
			var tre = tsa.Children.Cast<CodeElement>().Where(x => x.Name == "ReturnType" && x.Kind == vsCMElement.vsCMElementOther).FirstOrDefault();
			if (tre == null)
				return "any";

			var text = GetText(tre);
			var i0 = text.IndexOf('"');
			var i1 = text.LastIndexOf('"');
			var ttext = text.Substring(i0 + 1, i1 - i0 - 1);

			return GetTSType(ttext);
        }
	}
	string GetMethod(CodeElement member, bool isWeb)
	{
        var method = "GET";
		if (isWeb) {
			if (member.Name.ToLower().StartsWith("get"))
				method = "GET";
			else if (member.Name.ToLower().StartsWith("post"))
				method = "POST";
			else if (member.Name.ToLower().StartsWith("delete"))
				method = "DELETE";
			else if (member.Name.ToLower().StartsWith("put"))
				method = "PUT";
        }
        if (HasAttribute(member, xa => xa.FullName.EndsWith("HttpPostAttribute")))
            method = "POST";
        else if (HasAttribute(member, xa => xa.FullName.EndsWith("HttpDeleteAttribute")))
            method = "DELETE";
        else if (HasAttribute(member, xa => xa.FullName.EndsWith("HttpPutAttribute")))
            method = "PUT";
		return method;
	}
#>